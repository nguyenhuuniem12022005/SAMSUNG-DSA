import collections
from typing import List

class Solution:
    def maxSubarrays(self, n: int, conflictingPairs: List[List[int]]) -> int:
        
        # 1. right: Nhóm các 'u' (min_val) theo 'v' (max_val) của cặp xung đột.
        #    right[k] sẽ chứa danh sách các giá trị 'u' mà tạo thành cặp [u, k].
        #    Kích thước n+1 vì các số từ 1 đến n.
        right = [[] for _ in range(n + 1)]
        for a, b in conflictingPairs:
            right[max(a, b)].append(min(a, b))
        
        # 2. ans: Biến lưu trữ "tổng điểm cơ sở".
        #    Đây là tổng số mảng con hợp lệ nếu KHÔNG có cặp xung đột nào được loại bỏ.
        ans = 0 
        
        # 3. left: Mảng này là trái tim của thuật toán.
        #    Nó không phải là chỉ số 'left' truyền thống của cửa sổ trượt.
        #    left[0]: Lưu trữ giá trị 'u' (từ một cặp [u, v]) lớn nhất đã gặp cho đến hiện tại.
        #             Đây chính là `max_forbidden_start_idx` hay `actual_max_left_for_right` mà chúng ta đã thảo luận.
        #    left[1]: Lưu trữ giá trị 'u' lớn thứ hai đã gặp.
        #             Giá trị này cực kỳ quan trọng để tính toán "lợi ích" khi loại bỏ `left[0]`.
        #    Ban đầu, không có giới hạn nào, nên là [0, 0].
        left = [0, 0] 
        
        # 4. bonus: Mảng này lưu trữ tổng "lợi ích" nếu một giá trị 'u' cụ thể
        #    (mà từng đóng vai trò là `left[0]`) được loại bỏ.
        #    bonus[u] = tổng của (left[0] - left[1]) mỗi khi left[0] là 'u'
        #    Đây là nơi chúng ta tích lũy điểm cộng thêm.
        bonus = [0] * (n + 1)
        
        # 5. Duyệt qua các điểm kết thúc 'r' của mảng con (từ 1 đến n)
        for r in range(1, n + 1):
            # Cập nhật `left` dựa trên các cặp xung đột kết thúc tại `r`
            # Duyệt qua tất cả các 'l' (là 'u' trong cặp [l, r])
            for l in right[r]:
                # Đây là một thủ thuật thông minh để cập nhật top 2 giá trị lớn nhất:
                if l > left[0]:       # Nếu 'l' lớn hơn giá trị lớn nhất hiện tại
                    left = [l, left[0]] # 'l' trở thành lớn nhất, left[0] cũ trở thành lớn thứ hai
                elif l > left[1]:     # Nếu 'l' không phải lớn nhất nhưng lớn hơn lớn thứ hai
                    left = [left[0], l] # 'l' trở thành lớn thứ hai, left[0] vẫn giữ nguyên
            
            # Tính toán và cộng điểm cho 'ans' (tổng cơ sở)
            # `r - left[0]` là số lượng mảng con hợp lệ kết thúc tại `r`.
            # Các mảng con này có thể bắt đầu từ `left[0] + 1` đến `r`.
            # Ví dụ: r=5, left[0]=2 => bắt đầu từ 3,4,5 => 3 mảng con (5 - 2 = 3)
            ans += r - left[0]

            # 6. Tính toán "bonus"
            # Nếu `left[0]` (giới hạn lớn nhất hiện tại) không phải là 0 (tức là có một giới hạn thực sự)
            if left[0] > 0:
                # `left[0] - left[1]` là số lượng mảng con mà trước đây bị loại bỏ
                # CHỈ VÌ `left[0]`, nhưng sẽ trở thành hợp lệ nếu `left[0]` bị loại bỏ.
                # Chúng ta cộng khoản "lợi" này vào `bonus[left[0]]`.
                # Điều này giả định rằng nếu `left[0]` bị gỡ bỏ, `left[1]` sẽ trở thành giới hạn mới.
                bonus[left[0]] += left[0] - left[1]
        
        # 7. Kết quả cuối cùng
        # Kết quả là "tổng điểm cơ sở" cộng với "lợi ích tối đa" có thể đạt được
        # khi loại bỏ chính xác một cặp xung đột (cụ thể là cặp mà có 'u' là max_bonus[u]).
        return ans + max(bonus)